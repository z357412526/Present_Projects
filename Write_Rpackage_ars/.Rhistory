fun.name <- "uniform"
dun <- function(x){
return(dunif(x, min=0, max=1))
}
un <- test_dist(FUN=dun,
fun.name=fun.name,
a=0, b=1, N=N, rFUN=runif)
## *******************************************************
## vi.  beta
fun.name <- "beta"
dbet <- function(x){
return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))
}
bet <- test_dist(FUN=dbet,
fun.name=fun.name,
a=0.01, b=0.99, N=N, rFUN=rbeta,
shape1=3, shape2=2)
## *******************************************************
## vii. non-concave distribution
fun.name <- "non-log concave exp(x^2)"
de <- function(x){
return(exp(x^2))
}
exp2 <- test_dist(FUN=de,
fun.name=fun.name,
a=-1, b=1, N=N, rFUN=NA)
return(all(c(norm, gam, bet, lap, logist, un)))
}
test_that(test_main(1000), is_true())
}
main()
main()
main()
main()
main()
main()
main()
main()
library(testthat)
main()
main <- function(){
test_main <- function(N){
check_pval <- function(output, fun.name){
if(output$p.value <= 0.05){
check <- FALSE
print(paste("did NOT create a good sample with", fun.name,
", pvalue=", round(output$p.value, 3)))
} else {
check <- TRUE
print(paste("passed with", fun.name))
}
return(check)
}
test_dist <- function(FUN, fun.name, a, b, N, rFUN, ...){
out <- try(ars(N=N, f=FUN, a=a, b=b),
silent=TRUE)
if(inherits(out, "try-error")) {
print(paste("fails to evaluate with", fun.name))
out <- FALSE
} else {
y1 <- rFUN(N,...)
test <- ks.test(out$sample, y1)
out <- check_pval(test, fun.name)
}
return(out)
}
## *******************************************************
## i. Standard Normal Distribution
fun.name <- "normal"
dnor <- function(x){
return((1/(sqrt(2*pi)))*exp(-(x^2)/2))
}
norm <- test_dist(FUN=dnor,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rnorm)
## *******************************************************
## ii. Laplace Distribution
fun.name <- "laplace"
dlaplace <- function(x, m = 0, s = 1){
return(exp(-abs(x-m)/s)/(2*s))
}
rlaplace <- function(N){
U <- runif(N, -0.5, 0.5)
y <- sign(U)*rexp(N, 1)
return(y)
}
lap <- test_dist(FUN=dlaplace,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlaplace)
## *******************************************************
## iii. Logistic Distribution
fun.name <- "logistic"
dlogistic <- function(x){
return(exp(x)/(1+exp(x))^2)
}
logist <- test_dist(FUN=dlogistic,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlogis)
## *******************************************************
## iv. Gamma Distribution (chi square)
fun.name <- "gamma"
dgam <- function(x, theta=2, k=2){
return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))
}
gam <- test_dist(FUN=dgam,
fun.name=fun.name,
a=0.001, b=1000, N=N, rFUN=rgamma,
shape = 2, scale = 2)
## *******************************************************
## v.  uniform Distribution (chi square)
fun.name <- "uniform"
dun <- function(x){
return(dunif(x, min=0, max=1))
}
un <- test_dist(FUN=dun,
fun.name=fun.name,
a=0, b=1, N=N, rFUN=runif)
## *******************************************************
## vi.  beta
fun.name <- "beta"
dbet <- function(x){
return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))
}
bet <- test_dist(FUN=dbet,
fun.name=fun.name,
a=0.01, b=0.99, N=N, rFUN=rbeta,
shape1=3, shape2=2)
## *******************************************************
## vii. non-concave distribution
fun.name <- "non-log concave exp(x^2)"
de <- function(x){
return(exp(x^2))
}
exp2 <- test_dist(FUN=de,
fun.name=fun.name,
a=-1, b=1, N=N, rFUN=NA)
return(all(c(norm, gam, bet, lap, logist, un)))
}
test_that(test_main(1000), expect_true)
}
main()
main <- function(){
test_main <- function(N){
check_pval <- function(output, fun.name){
if(output$p.value <= 0.05){
check <- FALSE
print(paste("did NOT create a good sample with", fun.name,
", pvalue=", round(output$p.value, 3)))
} else {
check <- TRUE
print(paste("passed with", fun.name))
}
return(check)
}
test_dist <- function(FUN, fun.name, a, b, N, rFUN, ...){
out <- try(ars(N=N, f=FUN, a=a, b=b),
silent=TRUE)
if(inherits(out, "try-error")) {
print(paste("fails to evaluate with", fun.name))
out <- FALSE
} else {
y1 <- rFUN(N,...)
test <- ks.test(out$sample, y1)
out <- check_pval(test, fun.name)
}
return(out)
}
## *******************************************************
## i. Standard Normal Distribution
fun.name <- "normal"
dnor <- function(x){
return((1/(sqrt(2*pi)))*exp(-(x^2)/2))
}
norm <- test_dist(FUN=dnor,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rnorm)
## *******************************************************
## ii. Laplace Distribution
fun.name <- "laplace"
dlaplace <- function(x, m = 0, s = 1){
return(exp(-abs(x-m)/s)/(2*s))
}
rlaplace <- function(N){
U <- runif(N, -0.5, 0.5)
y <- sign(U)*rexp(N, 1)
return(y)
}
lap <- test_dist(FUN=dlaplace,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlaplace)
## *******************************************************
## iii. Logistic Distribution
fun.name <- "logistic"
dlogistic <- function(x){
return(exp(x)/(1+exp(x))^2)
}
logist <- test_dist(FUN=dlogistic,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlogis)
## *******************************************************
## iv. Gamma Distribution (chi square)
fun.name <- "gamma"
dgam <- function(x, theta=2, k=2){
return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))
}
gam <- test_dist(FUN=dgam,
fun.name=fun.name,
a=0.001, b=1000, N=N, rFUN=rgamma,
shape = 2, scale = 2)
## *******************************************************
## v.  uniform Distribution (chi square)
fun.name <- "uniform"
dun <- function(x){
return(dunif(x, min=0, max=1))
}
un <- test_dist(FUN=dun,
fun.name=fun.name,
a=0, b=1, N=N, rFUN=runif)
## *******************************************************
## vi.  beta
fun.name <- "beta"
dbet <- function(x){
return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))
}
bet <- test_dist(FUN=dbet,
fun.name=fun.name,
a=0.01, b=0.99, N=N, rFUN=rbeta,
shape1=3, shape2=2)
## *******************************************************
## vii. non-concave distribution
fun.name <- "non-log concave exp(x^2)"
de <- function(x){
return(exp(x^2))
}
exp2 <- test_dist(FUN=de,
fun.name=fun.name,
a=-1, b=1, N=N, rFUN=NA)
return(all(c(norm, gam, bet, lap, logist, un)))
}
test_that(test_main(1000), expect_true())
}
main()
main <- function(){
test_main <- function(N){
check_pval <- function(output, fun.name){
if(output$p.value <= 0.05){
check <- FALSE
print(paste("did NOT create a good sample with", fun.name,
", pvalue=", round(output$p.value, 3)))
} else {
check <- TRUE
print(paste("passed with", fun.name))
}
return(check)
}
test_dist <- function(FUN, fun.name, a, b, N, rFUN, ...){
out <- try(ars(N=N, f=FUN, a=a, b=b),
silent=TRUE)
if(inherits(out, "try-error")) {
print(paste("fails to evaluate with", fun.name))
out <- FALSE
} else {
y1 <- rFUN(N,...)
test <- ks.test(out$sample, y1)
out <- check_pval(test, fun.name)
}
return(out)
}
## *******************************************************
## i. Standard Normal Distribution
fun.name <- "normal"
dnor <- function(x){
return((1/(sqrt(2*pi)))*exp(-(x^2)/2))
}
norm <- test_dist(FUN=dnor,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rnorm)
## *******************************************************
## ii. Laplace Distribution
fun.name <- "laplace"
dlaplace <- function(x, m = 0, s = 1){
return(exp(-abs(x-m)/s)/(2*s))
}
rlaplace <- function(N){
U <- runif(N, -0.5, 0.5)
y <- sign(U)*rexp(N, 1)
return(y)
}
lap <- test_dist(FUN=dlaplace,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlaplace)
## *******************************************************
## iii. Logistic Distribution
fun.name <- "logistic"
dlogistic <- function(x){
return(exp(x)/(1+exp(x))^2)
}
logist <- test_dist(FUN=dlogistic,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlogis)
## *******************************************************
## iv. Gamma Distribution (chi square)
fun.name <- "gamma"
dgam <- function(x, theta=2, k=2){
return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))
}
gam <- test_dist(FUN=dgam,
fun.name=fun.name,
a=0.001, b=1000, N=N, rFUN=rgamma,
shape = 2, scale = 2)
## *******************************************************
## v.  uniform Distribution (chi square)
fun.name <- "uniform"
dun <- function(x){
return(dunif(x, min=0, max=1))
}
un <- test_dist(FUN=dun,
fun.name=fun.name,
a=0, b=1, N=N, rFUN=runif)
## *******************************************************
## vi.  beta
fun.name <- "beta"
dbet <- function(x){
return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))
}
bet <- test_dist(FUN=dbet,
fun.name=fun.name,
a=0.01, b=0.99, N=N, rFUN=rbeta,
shape1=3, shape2=2)
## *******************************************************
## vii. non-concave distribution
fun.name <- "non-log concave exp(x^2)"
de <- function(x){
return(exp(x^2))
}
exp2 <- test_dist(FUN=de,
fun.name=fun.name,
a=-1, b=1, N=N, rFUN=NA)
return(all(c(norm, gam, bet, lap, logist, un)))
}
test_that(test_main(1000), is_true())
}
mai()
main()
main <- function(){
test_main <- function(N){
check_pval <- function(output, fun.name){
if(output$p.value <= 0.05){
check <- FALSE
print(paste("did NOT create a good sample with", fun.name,
", pvalue=", round(output$p.value, 3)))
} else {
check <- TRUE
print(paste("passed with", fun.name))
}
return(check)
}
test_dist <- function(FUN, fun.name, a, b, N, rFUN, ...){
out <- try(ars(N=N, f=FUN, a=a, b=b),
silent=TRUE)
if(inherits(out, "try-error")) {
print(paste("fails to evaluate with", fun.name))
out <- FALSE
} else {
y1 <- rFUN(N,...)
test <- ks.test(out$sample, y1)
out <- check_pval(test, fun.name)
}
return(out)
}
## *******************************************************
## i. Standard Normal Distribution
fun.name <- "normal"
dnor <- function(x){
return((1/(sqrt(2*pi)))*exp(-(x^2)/2))
}
norm <- test_dist(FUN=dnor,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rnorm)
## *******************************************************
## ii. Laplace Distribution
fun.name <- "laplace"
dlaplace <- function(x, m = 0, s = 1){
return(exp(-abs(x-m)/s)/(2*s))
}
rlaplace <- function(N){
U <- runif(N, -0.5, 0.5)
y <- sign(U)*rexp(N, 1)
return(y)
}
lap <- test_dist(FUN=dlaplace,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlaplace)
## *******************************************************
## iii. Logistic Distribution
fun.name <- "logistic"
dlogistic <- function(x){
return(exp(x)/(1+exp(x))^2)
}
logist <- test_dist(FUN=dlogistic,
fun.name=fun.name,
a=-10, b=10, N=N, rFUN=rlogis)
## *******************************************************
## iv. Gamma Distribution (chi square)
fun.name <- "gamma"
dgam <- function(x, theta=2, k=2){
return((1/(gamma(k)*theta^k))*(x^(k-1))*exp(-x/theta))
}
gam <- test_dist(FUN=dgam,
fun.name=fun.name,
a=0.001, b=1000, N=N, rFUN=rgamma,
shape = 2, scale = 2)
## *******************************************************
## v.  uniform Distribution (chi square)
fun.name <- "uniform"
dun <- function(x){
return(dunif(x, min=0, max=1))
}
un <- test_dist(FUN=dun,
fun.name=fun.name,
a=0, b=1, N=N, rFUN=runif)
## *******************************************************
## vi.  beta
fun.name <- "beta"
dbet <- function(x){
return(dbeta(x, shape1 = 3, shape2 = 2, ncp = 0, log = FALSE))
}
bet <- test_dist(FUN=dbet,
fun.name=fun.name,
a=0.01, b=0.99, N=N, rFUN=rbeta,
shape1=3, shape2=2)
## *******************************************************
## vii. non-concave distribution
fun.name <- "non-log concave exp(x^2)"
de <- function(x){
return(exp(x^2))
}
exp2 <- test_dist(FUN=de,
fun.name=fun.name,
a=-1, b=1, N=N, rFUN=NA)
return(all(c(norm, gam, bet, lap, logist, un)))
}
return(test_that(test_main(1000), is_true()))
}
main()
devtools:use_testthat()
library(devtools)
devtools:use_testthat()
devtools::use_testthat()
getwd()
setwd("ars/")
devtools::use_testthat()
devtools::test()
system("ls")
devtools::test()
test_dir("tests/testthat")
test_dir("tests/testthat")
install("ars")
setwd("..")
install("ars")
libarary(ars)
library(ars)
test_package("ars", "main")
install('ars')
test_package("ars", "main")
test_package("ars", "main")
test_package("ars", "main")
test_package("ars", "main")
install("ars")
library(ars)
test_package("ars", "main")
install(ars)
install("ars")
?ars
?ars
help(ars)
??ars
?ars
?ars
help(ars)
?ars
install("ars")
library(devtools)
install("ars")
setwd("..")
install("ars")
?ars
?ars
getwd()
setwd("..")
library(devtools)
install("ars")
library(roxygen2)
library(ars)
?ars
help(ars)
install("ars")
library(ars)
?ars
？ars
?ars
install("ars")
library(ars)
install("ars")
library(ar)
library(ars)
?ars
library("devtools")
setwd("..")
install("ars")
library(ars)
?ars
